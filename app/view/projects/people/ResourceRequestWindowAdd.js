/**
 * The file ResourceRequestWindowAdd is the window chich is generated by clicking on the add resource button.
 * @extends {Ext.window.Window}
 * @alias 'widget.resourcerequestwindowadd'.
 * ViewModel : 'DDO.view.projects.people.ProjectWindowViewModel'.
 * ViewController : 'DDO.view.projects.people.ResourceRequestController'
 */
Ext.define('DDO.view.projects.people.ResourceRequestWindowAdd', {
    extend: 'Ext.window.Window',
    xtype: 'resourcerequestwindowadd',
    requires: ['DDO.view.projects.people.ProjectWindowViewModel'],
    initComponent: function() {
        this.callParent(arguments);
        var projectRequestVM = this.getViewModel();
        var  allResouceStore = projectRequestVM.getStore('allResourcesStore');
        var roleStore = projectRequestVM.getStore('projectRoleStore');
        if(!roleStore.isLoaded()){
            roleStore.load();
        }
    },
    viewModel: {
        type: 'projectwindowviewmodel'
    },
    closable: true,
    autoShow: true,
    scrollable:'y',
    height: Constants.ViewportHeight * 0.75,
    width: Constants.ViewportWidth * 0.77,
    reference:'resourcerequestwindowadd',
    closable:true,
   items: [{
       layout: 'hbox',
       items:[{
        xtype: 'form',
        width: '35%',
       
        items: [{
          xtype: 'container',
          padding:'20 0 0 0',
          defaults:{
            width:'68%',
            margin:'0 0 0 40',
           
          },
         items: [
             {
                  tbtext: '',
                  reference: 'message',
                  cls: 'message-color'
             },
           {
            xtype: 'combobox',
            fieldLabel: LabelsTitles.RESOURCEREQUEST.EMPLOYEE,
            labelAlign:'top',
            cls:'employeecombo-cls',
            name: 'employee_id',
            reference: 'employee',
            allowBlank:false,	  
            msgTarget:'side',
            queryMode: 'local',
            forceSelection: true,
            bind:{
              store:'{allResourcesStore}',
            },
            displayField: 'employee',
            valueField:'c_bpartner_id',
            listeners:{
              beforequery: 'onEmployeeComboSearch',
              select: 'onEmployeeSelect'
            }
          },
          {
            xtype: 'datefield',
            fieldLabel: LabelsTitles.RESOURCEREQUEST.STARTDATE,
            labelAlign: 'top',
            reference: 'startDate',
            name: 'startdate',
            submitFormat: 'd-m-Y',
            format: 'd-m-Y',
            maskRe: /[0-9\-\/]/,
            cls: 'startdate-cls',
            allowBlank: false,
            bind:{
                    value:'{employeeData.startdate}',
                    minValue:'{minValue}'
            },
            //maxValue: new Date(),
            createPicker: function () {
                var me = this,
                    format = Ext.String.format;
                return Ext.create('Ext.picker.Date', {
                    pickerField: me,
                    ownerCt: me.ownerCt,
                    renderTo: document.body,
                    floating: true,
                    hidden: true,
                    focusOnShow: true,
                    cls: 'ddo-create-datepicker',
                    minDate: me.minValue,
                    maxDate: me.maxValue,
                    disabledDatesRE: me.disabledDatesRE,
                    disabledDatesText: me.disabledDatesText,
                    disabledDays: me.disabledDays,
                    disabledDaysText: me.disabledDaysText,
                    format: me.format,
                    showToday: me.showToday,
                    startDay: me.startDay,
                    minText: format(me.minText, me.formatDate(me.minValue)),
                    maxText: format(me.maxText, me.formatDate(me.maxValue)),
                    listeners: {
                        scope: me,
                        select: me.onSelect
  
                    },
                    keyNavConfig: {
                        esc: function () {
                            me.collapse();
                        }
                    }
                });
            },
            listeners: {
                select: 'onDateRange',
            }
        }, {
            xtype: 'datefield',
            fieldLabel: LabelsTitles.RESOURCEREQUEST.ENDDATE,
            labelAlign: 'top',
            reference: 'endDate',
            name: 'enddate',
            submitFormat: 'd-m-Y',
            format: 'd-m-Y',
            maskRe: /[0-9\-\/]/,
            cls: 'enddate-cls',
            allowBlank: false,
              bind:{
                  value:'{employeeData.enddate}',
                  minValue:'{minValue}'
          },
            createPicker: function () {
                var me = this,
                    format = Ext.String.format;
                return Ext.create('Ext.picker.Date', {
                    pickerField: me,
                    ownerCt: me.ownerCt,
                    renderTo: document.body,
                    floating: true,
                    hidden: true,
                    focusOnShow: true,
                    cls: 'ddo-create-datepicker addpeopledate',
                    minDate: me.minValue,
                    maxDate: me.maxValue,
                    disabledDatesRE: me.disabledDatesRE,
                    disabledDatesText: me.disabledDatesText,
                    disabledDays: me.disabledDays,
                    disabledDaysText: me.disabledDaysText,
                    format: me.format,
                    showToday: me.showToday,
                    startDay: me.startDay,
                    minText: format(me.minText, me.formatDate(me.minValue)),
                    maxText: format(me.maxText, me.formatDate(me.maxValue)),
                    listeners: {
                        scope: me,
                        select: me.onSelect
  
                    },
                    keyNavConfig: {
                        esc: function () {
                            me.collapse();
                        }
                    }
                });
            },
            listeners: {
                select: 'onDateRange',
            }
        },
            {
              xtype: 'combobox',
              name: 'projectrole',
              allowBlank:false,
              fieldLabel: LabelsTitles.RESOURCEREQUEST.ROLE,
              labelAlign: 'top',
              queryMode: 'local',
              editable: true,
              cls: 'rolecombo-cls',
              bind:{
                store:'{projectRoleStore}',
              },
              displayField: 'name',
              valueField:'ad_role_id',
              listeners:{
                  beforequery: 'onEmployeeComboSearch'
              }
            },
            {
              xtype: 'combobox',
              fieldLabel: LabelsTitles.RESOURCEREQUEST.ALLOCATIONPERCENT,
              bind:{
                  value:'{employeeData.allocationperct}'
              },
              reference: 'percentage',
              name: 'allocationperct',
              labelAlign: 'top',
              cls: 'percent-cls',
              allowBlank: false,
              editable: false,
              displayField: 'allocation_percent',
              valueField: 'allocation_percent',
              store: ['5','10','15','25', '50', '75', '100']
          },
          {
            xtype: 'checkbox',
            boxLabel: LabelsTitles.RESOURCEREQUEST.SHADOWRESOURCE,
            cls: 'karmasetup-checkbox-cls',
            name: 'shadow_resource',
            reference: 'shadow_resource',
            boxLabelAlign: 'before',
            inputValue: 'Y',
            bind:{
                value:'{employeeData.shadow_resource}'
            }}]
        }],
        buttons: [{
            text: LabelsTitles.RESOURCEREQUEST.RESET,
            handler: 'onResetButtonClick',
            cls: 'reset-btn-cls'
        }, {
            xtype: 'tbspacer'
        }, {
            text: LabelsTitles.RESOURCEREQUEST.SAVE,
            formBind: true,
            handler: 'onSaveButtonClick',
            cls: 'save-btn-cls'
        }]
      },{
          xtype: 'projectsummarydetails',
          html:' <h2> Project Allocation Summary </h2>',
          width:'65%',
          margin :'10px 10px 0px 0px'
      }]
   }],
    listeners:{
        close:'onCloseClickWindwAdd'
    }
  });